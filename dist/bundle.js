(()=>{"use strict";class e{constructor(e,t,n,r){this.templateElement=document.getElementById(e),this.hostElement=document.getElementById(t);const s=document.importNode(this.templateElement.content,!0);this.element=s.firstElementChild,r&&(this.element.id=r),this.attach(n)}attach(e){this.hostElement.insertAdjacentElement(e?"afterbegin":"beforeend",this.element)}}function t(e){let t=!0;return e.required&&(t=t&&0!==e.value.toString().trim().length),null!=e.minLength&&"string"==typeof e.value&&(t=t&&e.value.length>=e.minLength),null!=e.maxLength&&"string"==typeof e.value&&(t=t&&e.value.length<=e.maxLength),null!=e.min&&"number"==typeof e.value&&(t=t&&e.value>=e.min),null!=e.max&&"number"==typeof e.value&&(t=t&&e.value<=e.max),t}function n(e,t,n){const r=n.value;return{configurable:!0,get(){return r.bind(this)}}}var r;!function(e){e[e.Active=0]="Active",e[e.Finished=1]="Finished"}(r||(r={}));class s{constructor(e,t,n,r,s){this.id=e,this.title=t,this.description=n,this.manday=r,this.status=s}}class i extends class{constructor(){this.listeners=[]}addListener(e){this.listeners.push(e)}}{constructor(){super(),this.projects=[]}static getInstance(){return this.instance||(this.instance=new i),this.instance}addProject(e,t,n){const i=new s(Math.random().toString(),e,t,n,r.Active);this.projects.push(i),this.updateListeners()}moveProject(e,t){const n=this.projects.find((t=>t.id===e));n&&n.status!==t&&(n.status=t,this.updateListeners())}updateListeners(){for(const e of this.listeners)e(this.projects.slice())}}const a=i.getInstance();class l extends e{constructor(){super("project-input","app",!0,"user-input"),this.titleInputElement=this.element.querySelector("#title"),this.descriptionInputElement=this.element.querySelector("#description"),this.mandayInputElement=this.element.querySelector("#manday"),this.configure()}configure(){this.element.addEventListener("submit",this.submitHandler)}renderContent(){}gatherUserInput(){const e=this.titleInputElement.value,n=this.descriptionInputElement.value,r=this.mandayInputElement.value,s={value:n,required:!0,minLength:5},i={value:r,required:!0,min:1,max:1e3};return t({value:e,required:!0})&&t(s)&&t(i)?[e,n,+r]:void alert("入力値が正しくありません。再度お試しください。")}clearInputs(){this.titleInputElement.value="",this.descriptionInputElement.value="",this.mandayInputElement.value=""}submitHandler(e){e.preventDefault();const t=this.gatherUserInput();if(Array.isArray(t)){const[e,n,r]=t;a.addProject(e,n,r),console.log(e,n,r),this.clearInputs()}}}!function(e,t,n,r){var s,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);i>3&&a&&Object.defineProperty(t,n,a)}([n],l.prototype,"submitHandler",null);var o=function(e,t,n,r){var s,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a};class c extends e{constructor(e,t){super("single-project",e,!1,t.id),this.project=t,this.configure(),this.renderContent()}get manday(){return this.project.manday<20?this.project.manday.toString()+"人日":this.project.manday/20+"人月"}dragStartHandler(e){e.dataTransfer.setData("text/plain",this.project.id),e.dataTransfer.effectAllowed="move"}dragEndHndler(e){console.log("Drag終了")}configure(){this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragEndHndler)}renderContent(){this.element.querySelector("h2").textContent=this.project.title,this.element.querySelector("h3").textContent=this.manday,this.element.querySelector("p").textContent=this.project.description}}o([n],c.prototype,"dragStartHandler",null),o([n],c.prototype,"dragEndHndler",null);var d=function(e,t,n,r){var s,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(a=(i<3?s(a):i>3?s(t,n,a):s(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a};class u extends e{constructor(e){super("project-list","app",!1,`${e}-projects`),this.type=e,this.assignedProjects=[],this.configure(),this.renderContent()}dragOverHandler(e){e.dataTransfer&&"text/plain"===e.dataTransfer.types[0]&&(e.preventDefault(),this.element.querySelector("ul").classList.add("droppable"))}dropHandler(e){const t=e.dataTransfer.getData("text/plain");a.moveProject(t,"active"===this.type?r.Active:r.Finished)}dragLeaveHandler(e){this.element.querySelector("ul").classList.remove("droppable")}configure(){this.element.addEventListener("dragover",this.dragOverHandler),this.element.addEventListener("drop",this.dropHandler),this.element.addEventListener("dragleave",this.dragLeaveHandler),a.addListener((e=>{const t=e.filter((e=>"active"==this.type?e.status===r.Active:e.status===r.Finished));this.assignedProjects=t,this.renderProjects()}))}renderContent(){const e=`${this.type}-project-list`;this.element.querySelector("ul").id=e,this.element.querySelector("h2").textContent="active"===this.type?"実行中プロジェクト":"完了プロジェクト"}renderProjects(){const e=document.getElementById(`${this.type}-project-list`);e.innerHTML="";for(const t of this.assignedProjects)new c(e.id,t)}}d([n],u.prototype,"dragOverHandler",null),d([n],u.prototype,"dropHandler",null),d([n],u.prototype,"dragLeaveHandler",null),new l,new u("active"),new u("finished")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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MUJ4QyxZQUNFckUsS0FBS1EsUUFBUThELGlCQUFpQixXQUFZdEUsS0FBS29HLGlCQUMvQ3BHLEtBQUtRLFFBQVE4RCxpQkFBaUIsT0FBUXRFLEtBQUt3RyxhQUMzQ3hHLEtBQUtRLFFBQVE4RCxpQkFBaUIsWUFBYXRFLEtBQUs0RyxrQkFFaEQ5QyxFQUFhcEIsYUFBYUksSUFFeEIsTUFBTWdFLEVBQW1CaEUsRUFBU2lFLFFBQVFuRCxHQUN2QixVQUFiNUQsS0FBS2tHLEtBQ0F0QyxFQUFJckIsU0FBV0wsRUFBY21CLE9BRS9CTyxFQUFJckIsU0FBV0wsRUFBY3lFLFdBRXRDM0csS0FBS21HLGlCQUFtQlcsRUFDeEI5RyxLQUFLZ0gsb0JBSVR4QyxnQkFDRSxNQUFNeUMsRUFBUyxHQUFHakgsS0FBS2tHLG9CQUN2QmxHLEtBQUtRLFFBQVEwRCxjQUFjLE1BQU94RCxHQUFLdUcsRUFDdkNqSCxLQUFLUSxRQUFRMEQsY0FBYyxNQUFPOEIsWUFDbEIsV0FBZGhHLEtBQUtrRyxLQUFvQixZQUFjLFdBTW5DYyxpQkFDTixNQUFNRSxFQUFTaEgsU0FBU0MsZUFDdEIsR0FBR0gsS0FBS2tHLHFCQUVWZ0IsRUFBT0MsVUFBWSxHQUNuQixJQUFLLE1BQU1DLEtBQVdwSCxLQUFLbUcsaUJBQ3pCLElBQUlWLEVBQVl5QixFQUFPeEcsR0FBSTBHLElBeEQvQixHQURDMUYsRyxvQ0FVRCxHQURDQSxHLGdDQVVELEdBRENBLEcscUNDMUNILElBQUlzQyxFQUNKLElBQUlpQyxFQUFZLFVBQ2hCLElBQUlBLEVBQVksYSIsInNvdXJjZXMiOlsid2VicGFjazovL3VuZGVyc3RhbmRpbmd0cy8uL3NyYy9jb21wb25lbnRzL2Jhc2UtY29tcG9uZW50LnRzIiwid2VicGFjazovL3VuZGVyc3RhbmRpbmd0cy8uL3NyYy91dGlsL3ZhbGlkYXRpb24udHMiLCJ3ZWJwYWNrOi8vdW5kZXJzdGFuZGluZ3RzLy4vc3JjL2RlY29yYXRvcnMvYXV0b2JpbmQudHMiLCJ3ZWJwYWNrOi8vdW5kZXJzdGFuZGluZ3RzLy4vc3JjL21vZGVscy9wcm9qZWN0LnRzIiwid2VicGFjazovL3VuZGVyc3RhbmRpbmd0cy8uL3NyYy9zdGF0ZS9wcm9qZWN0LXN0YXRlLnRzIiwid2VicGFjazovL3VuZGVyc3RhbmRpbmd0cy8uL3NyYy9jb21wb25lbnRzL3Byb2plY3QtaW5wdXQudHMiLCJ3ZWJwYWNrOi8vdW5kZXJzdGFuZGluZ3RzLy4vc3JjL2NvbXBvbmVudHMvcHJvamVjdC1pdGVtLnRzIiwid2VicGFjazovL3VuZGVyc3RhbmRpbmd0cy8uL3NyYy9jb21wb25lbnRzL3Byb2plY3QtbGlzdC50cyIsIndlYnBhY2s6Ly91bmRlcnN0YW5kaW5ndHMvLi9zcmMvYXBwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDb21wb25lbnQ8VCBleHRlbmRzIEhUTUxFbGVtZW50LCBVIGV4dGVuZHMgSFRNTEVsZW1lbnQ+IHtcbiAgdGVtcGxhdGVFbGVtZW50OiBIVE1MVGVtcGxhdGVFbGVtZW50O1xuICBob3N0RWxlbWVudDogVDtcbiAgZWxlbWVudDogVTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICB0ZW1wbGF0ZUlkOiBzdHJpbmcsXG4gICAgaG9zdEVsZW1lbnRJZDogc3RyaW5nLFxuICAgIGluc2VydEF0U3RhcnQ6IGJvb2xlYW4sXG4gICAgbmV3RWxlbWVudElkPzogc3RyaW5nXG4gICkge1xuICAgIHRoaXMudGVtcGxhdGVFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXG4gICAgICB0ZW1wbGF0ZUlkXG4gICAgKSEgYXMgSFRNTFRlbXBsYXRlRWxlbWVudDtcbiAgICB0aGlzLmhvc3RFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaG9zdEVsZW1lbnRJZCkhIGFzIFQ7XG4gICAgY29uc3QgaW1wb3J0ZWROb2RlID0gZG9jdW1lbnQuaW1wb3J0Tm9kZShcbiAgICAgIHRoaXMudGVtcGxhdGVFbGVtZW50LmNvbnRlbnQsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgICB0aGlzLmVsZW1lbnQgPSBpbXBvcnRlZE5vZGUuZmlyc3RFbGVtZW50Q2hpbGQgYXMgVTtcbiAgICBpZiAobmV3RWxlbWVudElkKSB7XG4gICAgICB0aGlzLmVsZW1lbnQuaWQgPSBuZXdFbGVtZW50SWQ7XG4gICAgfVxuICAgIHRoaXMuYXR0YWNoKGluc2VydEF0U3RhcnQpO1xuICB9XG5cbiAgYWJzdHJhY3QgY29uZmlndXJlKCk6IHZvaWQ7XG4gIGFic3RyYWN0IHJlbmRlckNvbnRlbnQoKTogdm9pZDtcblxuICBwcml2YXRlIGF0dGFjaChpbnNlcnRBdEJlZ2luaW5nOiBib29sZWFuKSB7XG4gICAgdGhpcy5ob3N0RWxlbWVudC5pbnNlcnRBZGphY2VudEVsZW1lbnQoXG4gICAgICBpbnNlcnRBdEJlZ2luaW5nID8gXCJhZnRlcmJlZ2luXCIgOiBcImJlZm9yZWVuZFwiLFxuICAgICAgdGhpcy5lbGVtZW50XG4gICAgKTtcbiAgfVxufVxuIiwiLy8gVmFsaWRhdGlvblxuZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0YWJsZSB7XG4gIHZhbHVlOiBzdHJpbmcgfCBudW1iZXI7XG4gIHJlcXVpcmVkPzogYm9vbGVhbjtcbiAgbWluTGVuZ3RoPzogbnVtYmVyO1xuICBtYXhMZW5ndGg/OiBudW1iZXI7XG4gIG1pbj86IG51bWJlcjtcbiAgbWF4PzogbnVtYmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGUodmFsaWRhdGFibGVJbnB1dDogVmFsaWRhdGFibGUpIHtcbiAgbGV0IGlzVmFsaWQgPSB0cnVlO1xuICBpZiAodmFsaWRhdGFibGVJbnB1dC5yZXF1aXJlZCkge1xuICAgIGlzVmFsaWQgPSBpc1ZhbGlkICYmIHZhbGlkYXRhYmxlSW5wdXQudmFsdWUudG9TdHJpbmcoKS50cmltKCkubGVuZ3RoICE9PSAwO1xuICB9XG4gIGlmIChcbiAgICB2YWxpZGF0YWJsZUlucHV0Lm1pbkxlbmd0aCAhPSBudWxsICYmXG4gICAgdHlwZW9mIHZhbGlkYXRhYmxlSW5wdXQudmFsdWUgPT09IFwic3RyaW5nXCJcbiAgKSB7XG4gICAgaXNWYWxpZCA9XG4gICAgICBpc1ZhbGlkICYmIHZhbGlkYXRhYmxlSW5wdXQudmFsdWUubGVuZ3RoID49IHZhbGlkYXRhYmxlSW5wdXQubWluTGVuZ3RoO1xuICB9XG4gIGlmIChcbiAgICB2YWxpZGF0YWJsZUlucHV0Lm1heExlbmd0aCAhPSBudWxsICYmXG4gICAgdHlwZW9mIHZhbGlkYXRhYmxlSW5wdXQudmFsdWUgPT09IFwic3RyaW5nXCJcbiAgKSB7XG4gICAgaXNWYWxpZCA9XG4gICAgICBpc1ZhbGlkICYmIHZhbGlkYXRhYmxlSW5wdXQudmFsdWUubGVuZ3RoIDw9IHZhbGlkYXRhYmxlSW5wdXQubWF4TGVuZ3RoO1xuICB9XG4gIGlmIChcbiAgICB2YWxpZGF0YWJsZUlucHV0Lm1pbiAhPSBudWxsICYmXG4gICAgdHlwZW9mIHZhbGlkYXRhYmxlSW5wdXQudmFsdWUgPT09IFwibnVtYmVyXCJcbiAgKSB7XG4gICAgaXNWYWxpZCA9IGlzVmFsaWQgJiYgdmFsaWRhdGFibGVJbnB1dC52YWx1ZSA+PSB2YWxpZGF0YWJsZUlucHV0Lm1pbjtcbiAgfVxuXG4gIGlmIChcbiAgICB2YWxpZGF0YWJsZUlucHV0Lm1heCAhPSBudWxsICYmXG4gICAgdHlwZW9mIHZhbGlkYXRhYmxlSW5wdXQudmFsdWUgPT09IFwibnVtYmVyXCJcbiAgKSB7XG4gICAgaXNWYWxpZCA9IGlzVmFsaWQgJiYgdmFsaWRhdGFibGVJbnB1dC52YWx1ZSA8PSB2YWxpZGF0YWJsZUlucHV0Lm1heDtcbiAgfVxuICByZXR1cm4gaXNWYWxpZDtcbn1cbiIsIi8vIGF1dG9iaW5kIGRlY29yYXRvclxuZXhwb3J0IGZ1bmN0aW9uIGF1dG9iaW5kKF86IGFueSwgXzI6IHN0cmluZywgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yKSB7XG4gIGNvbnN0IG9yaWdpbmFsTWV0aG9kID0gZGVzY3JpcHRvci52YWx1ZTtcbiAgY29uc3QgYWRqRGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yID0ge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQoKSB7XG4gICAgICBjb25zdCBib3VuZEZuID0gb3JpZ2luYWxNZXRob2QuYmluZCh0aGlzKTtcbiAgICAgIHJldHVybiBib3VuZEZuO1xuICAgIH0sXG4gIH07XG4gIHJldHVybiBhZGpEZXNjcmlwdG9yO1xufVxuIiwiZXhwb3J0IGVudW0gUHJvamVjdFN0YXR1cyB7XG4gIEFjdGl2ZSxcbiAgRmluaXNoZWQsXG59XG4vKipcbiAqICBQcm9qZWN0IGNsYXNzIO+8iOWFpeWKm+WApO+8iVxuICovXG5leHBvcnQgY2xhc3MgUHJvamVjdCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBpZDogc3RyaW5nLFxuICAgIHB1YmxpYyB0aXRsZTogc3RyaW5nLFxuICAgIHB1YmxpYyBkZXNjcmlwdGlvbjogc3RyaW5nLFxuICAgIHB1YmxpYyBtYW5kYXk6IG51bWJlcixcbiAgICBwdWJsaWMgc3RhdHVzOiBQcm9qZWN0U3RhdHVzXG4gICkge31cbn1cbiIsImltcG9ydCB7IFByb2plY3QsIFByb2plY3RTdGF0dXMgfSBmcm9tIFwiLi4vbW9kZWxzL3Byb2plY3RcIjtcblxudHlwZSBMaXN0ZW5lcjxUPiA9IChpdGVtczogVFtdKSA9PiB2b2lkO1xuXG5jbGFzcyBTdGF0ZTxUPiB7XG4gIHByb3RlY3RlZCBsaXN0ZW5lcnM6IExpc3RlbmVyPFQ+W10gPSBbXTtcblxuICBhZGRMaXN0ZW5lcihsaXN0ZW5lckZuOiBMaXN0ZW5lcjxUPikge1xuICAgIHRoaXMubGlzdGVuZXJzLnB1c2gobGlzdGVuZXJGbik7XG4gIH1cbn1cblxuLyoqXG4gKiBQcm9qZWN0IFN0YXRlIE1hbmFnZW1lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIFByb2plY3RTdGF0ZSBleHRlbmRzIFN0YXRlPFByb2plY3Q+IHtcbiAgcHJpdmF0ZSBwcm9qZWN0czogUHJvamVjdFtdID0gW107XG4gIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBQcm9qZWN0U3RhdGU7XG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgc3RhdGljIGdldEluc3RhbmNlKCkge1xuICAgIGlmICh0aGlzLmluc3RhbmNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZTtcbiAgICB9XG4gICAgdGhpcy5pbnN0YW5jZSA9IG5ldyBQcm9qZWN0U3RhdGUoKTtcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjg5fjg63jgrjjgqfjgq/jg4jov73liqDmmYJcbiAgICogQHBhcmFtIHRpdGxlXG4gICAqIEBwYXJhbSBkZXNjcmlwdGlvblxuICAgKiBAcGFyYW0gbWFuZGF5XG4gICAqL1xuICBhZGRQcm9qZWN0KHRpdGxlOiBzdHJpbmcsIGRlc2NyaXB0aW9uOiBzdHJpbmcsIG1hbmRheTogbnVtYmVyKSB7XG4gICAgY29uc3QgbmV3UHJvamVjdCA9IG5ldyBQcm9qZWN0KFxuICAgICAgTWF0aC5yYW5kb20oKS50b1N0cmluZygpLFxuICAgICAgdGl0bGUsXG4gICAgICBkZXNjcmlwdGlvbixcbiAgICAgIG1hbmRheSxcbiAgICAgIFByb2plY3RTdGF0dXMuQWN0aXZlXG4gICAgKTtcbiAgICB0aGlzLnByb2plY3RzLnB1c2gobmV3UHJvamVjdCk7XG4gICAgdGhpcy51cGRhdGVMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIG1vdmVQcm9qZWN0KHByb2plY3RJZDogc3RyaW5nLCBuZXdTdGF0dXM6IFByb2plY3RTdGF0dXMpIHtcbiAgICBjb25zdCBwcm9qZWN0ID0gdGhpcy5wcm9qZWN0cy5maW5kKChwcmopID0+IHByai5pZCA9PT0gcHJvamVjdElkKTtcbiAgICBpZiAocHJvamVjdCAmJiBwcm9qZWN0LnN0YXR1cyAhPT0gbmV3U3RhdHVzKSB7XG4gICAgICBwcm9qZWN0LnN0YXR1cyA9IG5ld1N0YXR1cztcbiAgICAgIHRoaXMudXBkYXRlTGlzdGVuZXJzKCk7XG4gICAgfVxuICB9XG4gIHByaXZhdGUgdXBkYXRlTGlzdGVuZXJzKCkge1xuICAgIC8vIOeZu+mMsuOBleOCjOOBn+mWouaVsOOCkuOBmeOBueOBpuWun+ihjFxuICAgIGZvciAoY29uc3QgbGlzdGVuZXJGbiBvZiB0aGlzLmxpc3RlbmVycykge1xuICAgICAgLy8gYHNsaWNlYOOBr+OCs+ODlOODvOOCkua4oeOBmeaEj+WRsyDplqLmlbDlhoXjgaflpInmm7TjgZXjgZvjgarjgYTjgZ/jgoFcbiAgICAgIGxpc3RlbmVyRm4odGhpcy5wcm9qZWN0cy5zbGljZSgpKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHByb2plY3RTdGF0ZSA9IFByb2plY3RTdGF0ZS5nZXRJbnN0YW5jZSgpO1xuIiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcIi4vYmFzZS1jb21wb25lbnRcIjtcbmltcG9ydCB7IFZhbGlkYXRhYmxlLCB2YWxpZGF0ZSB9IGZyb20gXCIuLi91dGlsL3ZhbGlkYXRpb25cIjtcbmltcG9ydCB7IGF1dG9iaW5kIH0gZnJvbSBcIi4uL2RlY29yYXRvcnMvYXV0b2JpbmRcIjtcbmltcG9ydCB7IHByb2plY3RTdGF0ZSB9IGZyb20gXCIuLi9zdGF0ZS9wcm9qZWN0LXN0YXRlXCI7XG4vKipcbiAqIFByb2plY3RJbnB1dCBDbGFzc1xuICovXG5leHBvcnQgY2xhc3MgUHJvamVjdElucHV0IGV4dGVuZHMgQ29tcG9uZW50PEhUTUxEaXZFbGVtZW50LCBIVE1MRm9ybUVsZW1lbnQ+IHtcbiAgLy8g5YWl5Yqb6aCF55uuXG4gIHRpdGxlSW5wdXRFbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50O1xuICBkZXNjcmlwdGlvbklucHV0RWxlbWVudDogSFRNTElucHV0RWxlbWVudDtcbiAgbWFuZGF5SW5wdXRFbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwicHJvamVjdC1pbnB1dFwiLCBcImFwcFwiLCB0cnVlLCBcInVzZXItaW5wdXRcIik7XG5cbiAgICB0aGlzLnRpdGxlSW5wdXRFbGVtZW50ID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBcIiN0aXRsZVwiXG4gICAgKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgIHRoaXMuZGVzY3JpcHRpb25JbnB1dEVsZW1lbnQgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgIFwiI2Rlc2NyaXB0aW9uXCJcbiAgICApIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgdGhpcy5tYW5kYXlJbnB1dEVsZW1lbnQgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgIFwiI21hbmRheVwiXG4gICAgKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgIHRoaXMuY29uZmlndXJlKCk7XG4gIH1cblxuICAvKipcbiAgICog44Kk44OZ44Oz44OI44Gu6Kit5a6aXG4gICAqL1xuICBjb25maWd1cmUoKSB7XG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgdGhpcy5zdWJtaXRIYW5kbGVyKTtcbiAgfVxuXG4gIHJlbmRlckNvbnRlbnQoKSB7fVxuXG4gIHByaXZhdGUgZ2F0aGVyVXNlcklucHV0KCk6IFtzdHJpbmcsIHN0cmluZywgbnVtYmVyXSB8IHZvaWQge1xuICAgIGNvbnN0IGVudGVyZWRUaXRsZSA9IHRoaXMudGl0bGVJbnB1dEVsZW1lbnQudmFsdWU7XG4gICAgY29uc3QgZW50ZXJlZERlc2NyaXB0aW9uID0gdGhpcy5kZXNjcmlwdGlvbklucHV0RWxlbWVudC52YWx1ZTtcbiAgICBjb25zdCBlbnRlcmVkTWFuZGF5ID0gdGhpcy5tYW5kYXlJbnB1dEVsZW1lbnQudmFsdWU7XG4gICAgY29uc3QgdGl0bGVWYWxpZGF0YWJsZTogVmFsaWRhdGFibGUgPSB7XG4gICAgICB2YWx1ZTogZW50ZXJlZFRpdGxlLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgfTtcbiAgICBjb25zdCBkZXNjcmlwdGlvblZhbGlkYXRhYmxlOiBWYWxpZGF0YWJsZSA9IHtcbiAgICAgIHZhbHVlOiBlbnRlcmVkRGVzY3JpcHRpb24sXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgIG1pbkxlbmd0aDogNSxcbiAgICB9O1xuICAgIGNvbnN0IG1hbmRheVZhbGlkYXRhYmxlOiBWYWxpZGF0YWJsZSA9IHtcbiAgICAgIHZhbHVlOiBlbnRlcmVkTWFuZGF5LFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICBtaW46IDEsXG4gICAgICBtYXg6IDEwMDAsXG4gICAgfTtcblxuICAgIGlmIChcbiAgICAgICF2YWxpZGF0ZSh0aXRsZVZhbGlkYXRhYmxlKSB8fFxuICAgICAgIXZhbGlkYXRlKGRlc2NyaXB0aW9uVmFsaWRhdGFibGUpIHx8XG4gICAgICAhdmFsaWRhdGUobWFuZGF5VmFsaWRhdGFibGUpXG4gICAgKSB7XG4gICAgICBhbGVydChcIuWFpeWKm+WApOOBjOato+OBl+OBj+OBguOCiuOBvuOBm+OCk+OAguWGjeW6puOBiuippuOBl+OBj+OBoOOBleOBhOOAglwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtlbnRlcmVkVGl0bGUsIGVudGVyZWREZXNjcmlwdGlvbiwgK2VudGVyZWRNYW5kYXldO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2xlYXJJbnB1dHMoKSB7XG4gICAgdGhpcy50aXRsZUlucHV0RWxlbWVudC52YWx1ZSA9IFwiXCI7XG4gICAgdGhpcy5kZXNjcmlwdGlvbklucHV0RWxlbWVudC52YWx1ZSA9IFwiXCI7XG4gICAgdGhpcy5tYW5kYXlJbnB1dEVsZW1lbnQudmFsdWUgPSBcIlwiO1xuICB9XG5cbiAgQGF1dG9iaW5kXG4gIHByaXZhdGUgc3VibWl0SGFuZGxlcihldmVudDogRXZlbnQpIHtcbiAgICAvLyBodHRw44Oq44Kv44Ko44K544OI44GM6YCB44KJ44KM44Gq44GE44KI44GG44Gr44GZ44KLXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCB1c2VySW5wdXQgPSB0aGlzLmdhdGhlclVzZXJJbnB1dCgpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHVzZXJJbnB1dCkpIHtcbiAgICAgIGNvbnN0IFt0aXRsZSwgZGVzYywgbWFuZGF5XSA9IHVzZXJJbnB1dDtcbiAgICAgIC8vIOODl+ODreOCuOOCp+OCr+ODiOi/veWKoOaZgiBhZGRQcm9qZWN0XG4gICAgICBwcm9qZWN0U3RhdGUuYWRkUHJvamVjdCh0aXRsZSwgZGVzYywgbWFuZGF5KTtcbiAgICAgIGNvbnNvbGUubG9nKHRpdGxlLCBkZXNjLCBtYW5kYXkpO1xuICAgICAgdGhpcy5jbGVhcklucHV0cygpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcIi4vYmFzZS1jb21wb25lbnRcIjtcbmltcG9ydCB7IFByb2plY3QgfSBmcm9tIFwiLi4vbW9kZWxzL3Byb2plY3RcIjtcbmltcG9ydCB7IERyYWdnYWJsZSB9IGZyb20gXCIuLi9tb2RlbHMvZHJhZy1kcm9wXCI7XG5pbXBvcnQgeyBhdXRvYmluZCB9IGZyb20gXCIuLi9kZWNvcmF0b3JzL2F1dG9iaW5kXCI7XG5cbi8qKlxuICog44OX44Ot44K444Kn44Kv44OI44GuMeOBpOOBruihqOekuuOCqOODquOColxuICovXG5leHBvcnQgY2xhc3MgUHJvamVjdEl0ZW1cbiAgZXh0ZW5kcyBDb21wb25lbnQ8SFRNTFVMaXN0RWxlbWVudCwgSFRNTExJRWxlbWVudD5cbiAgaW1wbGVtZW50cyBEcmFnZ2FibGVcbntcbiAgcHJpdmF0ZSBwcm9qZWN0OiBQcm9qZWN0O1xuXG4gIGdldCBtYW5kYXkoKSB7XG4gICAgaWYgKHRoaXMucHJvamVjdC5tYW5kYXkgPCAyMCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvamVjdC5tYW5kYXkudG9TdHJpbmcoKSArIFwi5Lq65pelXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnByb2plY3QubWFuZGF5IC8gMjAgKyBcIuS6uuaciFwiO1xuICAgIH1cbiAgfVxuICBjb25zdHJ1Y3Rvcihob3N0SWQ6IHN0cmluZywgcHJvamVjdDogUHJvamVjdCkge1xuICAgIHN1cGVyKFwic2luZ2xlLXByb2plY3RcIiwgaG9zdElkLCBmYWxzZSwgcHJvamVjdC5pZCk7XG4gICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcblxuICAgIHRoaXMuY29uZmlndXJlKCk7XG4gICAgdGhpcy5yZW5kZXJDb250ZW50KCk7XG4gIH1cbiAgQGF1dG9iaW5kXG4gIGRyYWdTdGFydEhhbmRsZXIoZXZlbnQ6IERyYWdFdmVudCk6IHZvaWQge1xuICAgIC8vIOODieODqeODg+OCsOaZguODh+ODvOOCv+ioreWumuOBp+OBjeOCi1xuICAgIGV2ZW50LmRhdGFUcmFuc2ZlciEuc2V0RGF0YShcInRleHQvcGxhaW5cIiwgdGhpcy5wcm9qZWN0LmlkKTtcbiAgICBldmVudC5kYXRhVHJhbnNmZXIhLmVmZmVjdEFsbG93ZWQgPSBcIm1vdmVcIjsgLy8g56e75YuV44Gu44Ko44OV44Kn44Kv44OIXG4gIH1cblxuICBAYXV0b2JpbmRcbiAgZHJhZ0VuZEhuZGxlcihfOiBEcmFnRXZlbnQpOiB2b2lkIHtcbiAgICBjb25zb2xlLmxvZyhcIkRyYWfntYLkuoZcIik7XG4gIH1cblxuICBjb25maWd1cmUoKTogdm9pZCB7XG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnc3RhcnRcIiwgdGhpcy5kcmFnU3RhcnRIYW5kbGVyKTtcbiAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdlbmRcIiwgdGhpcy5kcmFnRW5kSG5kbGVyKTtcbiAgfVxuICByZW5kZXJDb250ZW50KCk6IHZvaWQge1xuICAgIHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiaDJcIikhLnRleHRDb250ZW50ID0gdGhpcy5wcm9qZWN0LnRpdGxlO1xuICAgIHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiaDNcIikhLnRleHRDb250ZW50ID0gdGhpcy5tYW5kYXk7XG4gICAgdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJwXCIpIS50ZXh0Q29udGVudCA9IHRoaXMucHJvamVjdC5kZXNjcmlwdGlvbjtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcIi4vYmFzZS1jb21wb25lbnRcIjtcbmltcG9ydCB7IERyYWdnVGFyZ2V0IH0gZnJvbSBcIi4uL21vZGVscy9kcmFnLWRyb3BcIjtcbmltcG9ydCB7IFByb2plY3QsIFByb2plY3RTdGF0dXMgfSBmcm9tIFwiLi4vbW9kZWxzL3Byb2plY3RcIjtcbmltcG9ydCB7IGF1dG9iaW5kIH0gZnJvbSBcIi4uL2RlY29yYXRvcnMvYXV0b2JpbmRcIjtcbmltcG9ydCB7IHByb2plY3RTdGF0ZSB9IGZyb20gXCIuLi9zdGF0ZS9wcm9qZWN0LXN0YXRlXCI7XG5pbXBvcnQgeyBQcm9qZWN0SXRlbSB9IGZyb20gXCIuL3Byb2plY3QtaXRlbVwiO1xuLyoqXG4gKiBQcm9qZWN0TGlzdCBDbGFzc1xuICovXG5leHBvcnQgY2xhc3MgUHJvamVjdExpc3RcbiAgZXh0ZW5kcyBDb21wb25lbnQ8SFRNTERpdkVsZW1lbnQsIEhUTUxFbGVtZW50PlxuICBpbXBsZW1lbnRzIERyYWdnVGFyZ2V0XG57XG4gIGFzc2lnbmVkUHJvamVjdHM6IFByb2plY3RbXTtcblxuICAvKipcbiAgICogY29uc3RydWN0b3JcbiAgICpcbiAgICogQHBhcmFtIHR5cGVcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdHlwZTogXCJhY3RpdmVcIiB8IFwiZmluaXNoZWRcIikge1xuICAgIHN1cGVyKFwicHJvamVjdC1saXN0XCIsIFwiYXBwXCIsIGZhbHNlLCBgJHt0eXBlfS1wcm9qZWN0c2ApO1xuICAgIHRoaXMuYXNzaWduZWRQcm9qZWN0cyA9IFtdO1xuXG4gICAgdGhpcy5jb25maWd1cmUoKTtcbiAgICB0aGlzLnJlbmRlckNvbnRlbnQoKTtcbiAgfVxuICBAYXV0b2JpbmRcbiAgZHJhZ092ZXJIYW5kbGVyKGV2ZW50OiBEcmFnRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoZXZlbnQuZGF0YVRyYW5zZmVyICYmIGV2ZW50LmRhdGFUcmFuc2Zlci50eXBlc1swXSA9PT0gXCJ0ZXh0L3BsYWluXCIpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIERyb3DjgpLoqLHlj6/jgZnjgovjgIJwcml2ZW50PemYsuOBkFxuICAgICAgY29uc3QgbGlzdEVsID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJ1bFwiKSE7XG4gICAgICBsaXN0RWwuY2xhc3NMaXN0LmFkZChcImRyb3BwYWJsZVwiKTtcbiAgICB9XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgZHJvcEhhbmRsZXIoZXZlbnQ6IERyYWdFdmVudCk6IHZvaWQge1xuICAgIGNvbnN0IHByaklkID0gZXZlbnQuZGF0YVRyYW5zZmVyIS5nZXREYXRhKFwidGV4dC9wbGFpblwiKTtcbiAgICBwcm9qZWN0U3RhdGUubW92ZVByb2plY3QoXG4gICAgICBwcmpJZCxcbiAgICAgIHRoaXMudHlwZSA9PT0gXCJhY3RpdmVcIiA/IFByb2plY3RTdGF0dXMuQWN0aXZlIDogUHJvamVjdFN0YXR1cy5GaW5pc2hlZFxuICAgICk7XG4gIH1cblxuICBAYXV0b2JpbmRcbiAgZHJhZ0xlYXZlSGFuZGxlcihfOiBEcmFnRXZlbnQpOiB2b2lkIHtcbiAgICBjb25zdCBsaXN0RWwgPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcInVsXCIpITtcbiAgICBsaXN0RWwuY2xhc3NMaXN0LnJlbW92ZShcImRyb3BwYWJsZVwiKTtcbiAgfVxuICBjb25maWd1cmUoKSB7XG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnb3ZlclwiLCB0aGlzLmRyYWdPdmVySGFuZGxlcik7XG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJkcm9wXCIsIHRoaXMuZHJvcEhhbmRsZXIpO1xuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ2xlYXZlXCIsIHRoaXMuZHJhZ0xlYXZlSGFuZGxlcik7XG4gICAgLy8g44OX44Ot44K444Kn44Kv44OI6L+95Yqg5pmC5a6f6KGM44GZ44KL6Zai5pWw44Gu55m76YyyXG4gICAgcHJvamVjdFN0YXRlLmFkZExpc3RlbmVyKChwcm9qZWN0czogUHJvamVjdFtdKSA9PiB7XG4gICAgICAvLyDplqLmlbDjga50cnVlIGZhbHNlIOOBp+i/veWKoOOBi+OBqeOBhuOBi+OBjOaxuuOBvuOCi1xuICAgICAgY29uc3QgcmVsZXZhbnRQcm9qZWN0cyA9IHByb2plY3RzLmZpbHRlcigocHJqKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT0gXCJhY3RpdmVcIikge1xuICAgICAgICAgIHJldHVybiBwcmouc3RhdHVzID09PSBQcm9qZWN0U3RhdHVzLkFjdGl2ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJqLnN0YXR1cyA9PT0gUHJvamVjdFN0YXR1cy5GaW5pc2hlZDtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5hc3NpZ25lZFByb2plY3RzID0gcmVsZXZhbnRQcm9qZWN0czsgLy8gYHJlbGV2YW50YOmWoumAo+OBmeOCiyDjgozjgozjgbDjgpPjgahcbiAgICAgIHRoaXMucmVuZGVyUHJvamVjdHMoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlckNvbnRlbnQoKSB7XG4gICAgY29uc3QgbGlzdElkID0gYCR7dGhpcy50eXBlfS1wcm9qZWN0LWxpc3RgO1xuICAgIHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwidWxcIikhLmlkID0gbGlzdElkO1xuICAgIHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiaDJcIikhLnRleHRDb250ZW50ID1cbiAgICAgIHRoaXMudHlwZSA9PT0gXCJhY3RpdmVcIiA/IFwi5a6f6KGM5Lit44OX44Ot44K444Kn44Kv44OIXCIgOiBcIuWujOS6huODl+ODreOCuOOCp+OCr+ODiFwiO1xuICB9XG5cbiAgLyoqXG4gICAqIOODl+ODreOCuOOCp+OCr+ODiOi/veWKoOaZguWun+ihjOOBleOCjOOCi+mWouaVsFxuICAgKi9cbiAgcHJpdmF0ZSByZW5kZXJQcm9qZWN0cygpIHtcbiAgICBjb25zdCBsaXN0RWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcbiAgICAgIGAke3RoaXMudHlwZX0tcHJvamVjdC1saXN0YFxuICAgICkhIGFzIEhUTUxVTGlzdEVsZW1lbnQ7XG4gICAgbGlzdEVsLmlubmVySFRNTCA9IFwiXCI7XG4gICAgZm9yIChjb25zdCBwcmpJdGVtIG9mIHRoaXMuYXNzaWduZWRQcm9qZWN0cykge1xuICAgICAgbmV3IFByb2plY3RJdGVtKGxpc3RFbC5pZCwgcHJqSXRlbSk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBQcm9qZWN0SW5wdXQgfSBmcm9tIFwiLi9jb21wb25lbnRzL3Byb2plY3QtaW5wdXRcIjtcbmltcG9ydCB7IFByb2plY3RMaXN0IH0gZnJvbSBcIi4vY29tcG9uZW50cy9wcm9qZWN0LWxpc3RcIjtcblxubmV3IFByb2plY3RJbnB1dCgpO1xubmV3IFByb2plY3RMaXN0KFwiYWN0aXZlXCIpO1xubmV3IFByb2plY3RMaXN0KFwiZmluaXNoZWRcIik7XG4iXSwibmFtZXMiOlsiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJ0ZW1wbGF0ZUlkIiwiaG9zdEVsZW1lbnRJZCIsImluc2VydEF0U3RhcnQiLCJuZXdFbGVtZW50SWQiLCJ0aGlzIiwidGVtcGxhdGVFbGVtZW50IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImhvc3RFbGVtZW50IiwiaW1wb3J0ZWROb2RlIiwiaW1wb3J0Tm9kZSIsImNvbnRlbnQiLCJlbGVtZW50IiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJpZCIsImF0dGFjaCIsImluc2VydEF0QmVnaW5pbmciLCJpbnNlcnRBZGphY2VudEVsZW1lbnQiLCJ2YWxpZGF0ZSIsInZhbGlkYXRhYmxlSW5wdXQiLCJpc1ZhbGlkIiwicmVxdWlyZWQiLCJ2YWx1ZSIsInRvU3RyaW5nIiwidHJpbSIsImxlbmd0aCIsIm1pbkxlbmd0aCIsIm1heExlbmd0aCIsIm1pbiIsIm1heCIsImF1dG9iaW5kIiwiXyIsIl8yIiwiZGVzY3JpcHRvciIsIm9yaWdpbmFsTWV0aG9kIiwiY29uZmlndXJhYmxlIiwiZ2V0IiwiYmluZCIsIlByb2plY3RTdGF0dXMiLCJQcm9qZWN0IiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsIm1hbmRheSIsInN0YXR1cyIsIlByb2plY3RTdGF0ZSIsImxpc3RlbmVycyIsImFkZExpc3RlbmVyIiwibGlzdGVuZXJGbiIsInB1c2giLCJzdXBlciIsInByb2plY3RzIiwic3RhdGljIiwiaW5zdGFuY2UiLCJhZGRQcm9qZWN0IiwibmV3UHJvamVjdCIsIk1hdGgiLCJyYW5kb20iLCJBY3RpdmUiLCJ1cGRhdGVMaXN0ZW5lcnMiLCJtb3ZlUHJvamVjdCIsInByb2plY3RJZCIsIm5ld1N0YXR1cyIsInByb2plY3QiLCJmaW5kIiwicHJqIiwic2xpY2UiLCJwcm9qZWN0U3RhdGUiLCJnZXRJbnN0YW5jZSIsIlByb2plY3RJbnB1dCIsInRpdGxlSW5wdXRFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImRlc2NyaXB0aW9uSW5wdXRFbGVtZW50IiwibWFuZGF5SW5wdXRFbGVtZW50IiwiY29uZmlndXJlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInN1Ym1pdEhhbmRsZXIiLCJyZW5kZXJDb250ZW50IiwiZ2F0aGVyVXNlcklucHV0IiwiZW50ZXJlZFRpdGxlIiwiZW50ZXJlZERlc2NyaXB0aW9uIiwiZW50ZXJlZE1hbmRheSIsImRlc2NyaXB0aW9uVmFsaWRhdGFibGUiLCJtYW5kYXlWYWxpZGF0YWJsZSIsImFsZXJ0IiwiY2xlYXJJbnB1dHMiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwidXNlcklucHV0IiwiQXJyYXkiLCJpc0FycmF5IiwiZGVzYyIsImNvbnNvbGUiLCJsb2ciLCJQcm9qZWN0SXRlbSIsImhvc3RJZCIsImRyYWdTdGFydEhhbmRsZXIiLCJkYXRhVHJhbnNmZXIiLCJzZXREYXRhIiwiZWZmZWN0QWxsb3dlZCIsImRyYWdFbmRIbmRsZXIiLCJ0ZXh0Q29udGVudCIsIlByb2plY3RMaXN0IiwidHlwZSIsImFzc2lnbmVkUHJvamVjdHMiLCJkcmFnT3ZlckhhbmRsZXIiLCJ0eXBlcyIsImNsYXNzTGlzdCIsImFkZCIsImRyb3BIYW5kbGVyIiwicHJqSWQiLCJnZXREYXRhIiwiRmluaXNoZWQiLCJkcmFnTGVhdmVIYW5kbGVyIiwicmVtb3ZlIiwicmVsZXZhbnRQcm9qZWN0cyIsImZpbHRlciIsInJlbmRlclByb2plY3RzIiwibGlzdElkIiwibGlzdEVsIiwiaW5uZXJIVE1MIiwicHJqSXRlbSJdLCJzb3VyY2VSb290IjoiIn0=